//  ----------------------------------------------------------------------
//  Copyright (C) 2020  即时通讯网(52im.net) & Jack Jiang.
//  The MobileIMSDK_TCP (MobileIMSDK v5.x TCP版) Project.
//  All rights reserved.
//
//  > Github地址: https://github.com/JackJiang2011/MobileIMSDK
//  > 文档地址:    http://www.52im.net/forum-89-1.html
//  > 技术社区：   http://www.52im.net/
//  > 技术交流群： 320837163 (http://www.52im.net/topic-qqgroup.html)
//  > 作者公众号： “即时通讯技术圈】”，欢迎关注！
//  > 联系作者：   http://www.52im.net/thread-2792-1-1.html
//
//  "即时通讯网(52im.net) - 即时通讯开发者社区!" 推荐开源工程。
//  ----------------------------------------------------------------------

#import "LocalDataSender.h"
#import "ProtocalFactory.h"
#import "ClientCoreSDK.h"
#import "KeepAliveDaemon.h"
#import "CharsetHelper.h"
#import "QoS4SendDaemon.h"
#import "ErrorCode.h"
#import "MBGCDAsyncSocket.h"
#import "LocalSocketProvider.h"
#import "ConfigEntity.h"
#import "TCPUtils.h"
#import "CompletionDefine.h"

@implementation LocalDataSender

// 本类的单例对象
static LocalDataSender *instance = nil;

//-----------------------------------------------------------------------------------
#pragma mark - 仅内部可调用的方法

- (int) checkBeforeSend
{
    if(![[ClientCoreSDK sharedInstance] isInitialed])
        return ForC_CLIENT_SDK_NO_INITIALED;
    
    //## Bug FIX：20200811 by JackJiang
    //## 解决问题：注释掉以下代码，解决模拟器运行时，电脑网络断开后重新连接成功，但模拟器中无法收到网络已连接事件，而导致永远无法重连成功的问题
    //## 详细原因：因目前，MobileIMSDK中的网络连接和断开事件是用Apple的Reachability工具类实现，而此工具类在上述场景下，无法正常收到网络已
    //##         已连接事件，这可能是Reachability本身的Bug，也可能是模拟器所处网络环境的特殊性（必竟模拟器中的网并没有关，只是连不上外网而已）。
    //## 技术点评：当前的解决方法，从MobileIMSDK算法的角度来说，没有什么影响，可继续观察运行效果。
//    if(![ClientCoreSDK sharedInstance].localDeviceNetworkOk)
//    {
//        NSLog(@"【IMCORE-TCP】本地网络不能工作，send数据没有继续!");
//        return ForC_LOCAL_NETWORK_NOT_WORKING;
//    }
    //## Bug FIX：END
    
    return COMMON_CODE_OK;
}

/*
 * 发送数据到服务端.
 * <p>
 * 注意：直接调用此方法将无法支持QoS质量保证哦！
 *
 * @param fullProtocalBytes Protocal对象转成JSON后再编码成byte数组后的结果
 * @param dataLen Protocal对象转成JSON后再编码成byte数组长度
 * @return error code
 * @see ErrorCode
 * @see ErrorCode.ForC
 */
- (int) sendImpl_:(NSData *)fullProtocalBytes
{
    // socket操作前的常规检查
    int codeForCheck = [self checkBeforeSend];
    if(codeForCheck != COMMON_CODE_OK)
        return codeForCheck;

    // 获得UDPSocket实例
    MBGCDAsyncSocket *ds = [[LocalSocketProvider sharedInstance] getLocalSocket];
    if(ds != nil && [ds isConnected])// && [ClientCoreSDK sharedInstance].connectedToServer)
    {
        return [TCPUtils send:ds withData:fullProtocalBytes] ? COMMON_CODE_OK : COMMON_DATA_SEND_FAILD;
    }
    else
    {
        // 此种情况下的消息，将在应用层由QoS机制进行重传或不重传保证，所以此代码下无需再处理了
        NSLog(@"【IMCORE-TCP】scocket未连接，无法发送，本条将被忽略（data=%@）!", fullProtocalBytes);
        return COMMON_DATA_SEND_FAILD;//COMMON_CODE_OK;
    }
}

- (void) putToQoS:(Protocal *)p
{
    // 【【C2C或C2S模式下的QoS机制1/4步：将包加入到发送QoS队列中】】
    // 如果需要进行QoS质量保证，则把它放入质量保证队列中供处理(已在存在于列表中就不用再加了，已经存在则意味当前发送的这个是重传包哦)
    if(p.QoS && ![[QoS4SendDaemon sharedInstance] exist:p.fp])
        [[QoS4SendDaemon sharedInstance] put:p];
}


//-----------------------------------------------------------------------------------
#pragma mark - 外部可调用的方法

// 获取本类的单例。使用单例访问本类的所有资源是唯一的合法途径。
+ (LocalDataSender *)sharedInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[super allocWithZone:NULL] init];
    });
    return instance;
}

- (int) sendLogin:(NSString *)loginUserId withToken:(NSString *)loginToken
{
    return [self sendLogin:loginUserId withToken:loginToken andExtra:nil];
}

- (int) sendLogin:(NSString *)loginUserId withToken:(NSString *)loginToken andExtra:(NSString *)extra
{
    // 确保首先进行核心库的初始化（此方法多次调用是无害的，但必须要保证在使用IM核心库的任何实质方法前调用（初始化）1次）
    [[ClientCoreSDK sharedInstance] initCore];
    
    /* ========================================【补充说明】========================================
     登陆代码中，进行与服务端连接与否的检查，是登陆逻辑中特有的（其它正常发送时不需要有这种检查），因为正常的数据通信系统中，
     登陆验证是第一步，也是必须的一步，此步里进行连接检查（如果未连接就进行连接的发起）、身份认证等，此步正常结束后，才是一
     个通信系统能正常工作的开始，这是很合理的逻辑。必竟，首次的连接建立和身份认证，不可能由登陆之外的逻辑来实现，否则那就很
     奇怪了！ ====================================================================================*/
    
    // socket操作前的常规检查
    int codeForCheck = [self checkBeforeSend];
    if(codeForCheck != COMMON_CODE_OK)
        return codeForCheck;
    
    // 获得UDPSocket实例
    MBGCDAsyncSocket *ds = [[LocalSocketProvider sharedInstance] getLocalSocket];
    // 当发现socket未连接时，首先尝试建立与服务端的连接，这是登陆功能的附加逻辑（但不能像udp一样，每次普通数据发送就尝试进行连接，那样不合理也不利于安全性）
//    if(ds != nil && ![ds isConnected])
    if(![[LocalSocketProvider sharedInstance] isLocalSocketReady])
    {
        ConnectionCompletion observerBlock = ^(BOOL connectResult) {
            // 成功建立了TCP连接后立即把登陆包发出去
            if(connectResult)
                [self sendLoginImpl:loginUserId withToken:loginToken andExtra:extra];
            // TCP连接建立失败
            else
               NSLog(@"【IMCORE-TCP】[来自GCDAsyncSocket的连接结果回调通知]socket连接失败，本次登陆信息未成功发出！");
        };
        // 调置连接回调
        [[LocalSocketProvider sharedInstance] setConnectionObserver:observerBlock];
        
        // 因为connect是异步的，为了在尽可能保证在send前就已connect，所以在socketProvider里Bind后就connect是最佳的，但最终能不能真正
        // 连接上，还得看delegate的反馈，但这并不重要，即使真连不上，后面的QoS机制也会让告之上层哪些包因为些几率极小的因素而没有发送成功!
        NSError *connectError = nil;
        int connectCode = [[LocalSocketProvider sharedInstance] tryConnectToHost:&connectError withSocket:ds completion:observerBlock];
        // 如果连接意图没有成功发出则返回错误码
        if(connectCode != COMMON_CODE_OK)
            return connectCode;
        // 此种情况下的消息，将在应用层由QoS机制进行重传或不重传保证，所以此代码下无需再处理了
        // 【补充说明】：此种情况下的发送成功并不是真正的成功，只是作为上层判断的依据而已，（因整个socket操作等都是GCD异步完成，理论上发出成功不意味着实际被成功收
        //            到哦），但这并不会影响体验，因为MobileIMSDK本身存在QoS送达保证机制，会在底层保证消息不会莫名消失，UI层也会稍后在回调中通知是否真正送达。
        else
            return COMMON_CODE_OK;
    }
    // 否则直接发送
    else
    {
        return [self sendLoginImpl:loginUserId withToken:loginToken andExtra:extra];
    }
}

- (int)sendLoginImpl:(NSString *)loginUserId withToken:(NSString *)loginToken andExtra:(NSString *)extra
{
    // 登陆信息
    NSData *b = [[ProtocalFactory createPLoginInfo:loginUserId withToken:loginToken andExtra:extra] toBytes];
    
    int code = [self sendImpl_:b];
    // 登陆信息成功发出时就把登陆名存下来
    if(code == 0)
    {
        [[ClientCoreSDK sharedInstance] setCurrentLoginUserId:loginUserId];
        [[ClientCoreSDK sharedInstance] setCurrentLoginToken:loginToken];
        [[ClientCoreSDK sharedInstance] setCurrentLoginExtra:extra];
    }
    
    return code;
}

- (int) sendLoginout
{
    int code = COMMON_CODE_OK;
    if([ClientCoreSDK sharedInstance].loginHasInit)
    {
        NSString *loginUserId = [ClientCoreSDK sharedInstance].currentLoginUserId;
        NSData *b = [[ProtocalFactory createPLoginoutInfo:loginUserId] toBytes];
        code = [self sendImpl_:b];
        // 登出信息成功发出时
        if(code == 0)
        {
            // 发出退出登陆的消息同时也关闭心跳线程
            [[KeepAliveDaemon sharedInstance] stop];
            // 重置登陆标识
            [[ClientCoreSDK sharedInstance] setLoginHasInit:NO];
        }
    }
    
    // 释放SDK资源
    [[ClientCoreSDK sharedInstance] releaseCore];
    
    return code;
}

- (int) sendKeepAlive
{
    NSString *currentLoginUserId = [[ClientCoreSDK sharedInstance] currentLoginUserId];
    NSData *b = [[ProtocalFactory createPKeepAlive: currentLoginUserId] toBytes];
    return [self sendImpl_:b];
}

- (int) sendCommonDataWithStr:(NSString *)dataContentWidthStr toUserId:(NSString *)to_user_id
{
    return [self sendCommonDataWithStr:dataContentWidthStr toUserId:to_user_id withTypeu:-1];
}

- (int) sendCommonDataWithStr:(NSString *)dataContentWidthStr toUserId:(NSString *)to_user_id withTypeu:(int)typeu
{
    NSString *currentLoginUserId = [[ClientCoreSDK sharedInstance] currentLoginUserId];
    Protocal *p = [ProtocalFactory createCommonData:dataContentWidthStr fromUserId:currentLoginUserId toUserId:to_user_id withTypeu:typeu];
    return [self sendCommonData:p];
}

- (int) sendCommonDataWithStr:(NSString *)dataContentWidthStr toUserId:(NSString *)to_user_id qos:(BOOL)QoS fp:(NSString *)fingerPrint withTypeu:(int)typeu
{
    NSString *currentLoginUserId = [[ClientCoreSDK sharedInstance] currentLoginUserId];
    Protocal *p = [ProtocalFactory createCommonData:dataContentWidthStr fromUserId:currentLoginUserId toUserId:to_user_id qos:QoS fp:fingerPrint withTypeu:typeu];
    return [self sendCommonData:p];
}

- (int) sendCommonData:(Protocal *)p
{
    // 数据发送代码需要同步约束，否则在IM框架中此方法的相关处理涉及全局变量的设置时会出现同步操作问题
    @synchronized(self)
    {
        if(p != nil)
        {
            NSData *b = [p toBytes];
            int code = [self sendImpl_:b];
            if(code == 0)
            {
                // 尝试加入到QoS保证队列
                [self putToQoS:p];
            }
            return code;
        }
        else
            return COMMON_INVALID_PROTOCAL;
    }
}

@end
